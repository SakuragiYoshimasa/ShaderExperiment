#pragma kernel RecalcPositions

RWTexture2D<float4> CurrPositionBuffer;
RWTexture2D<float4> CurrNormalBuffer;
StructuredBuffer<float3> WeightsBuffer;
StructuredBuffer<int> IndicesBuffer;
RWStructuredBuffer<float4> PositionBuffer;
RWStructuredBuffer<float4> RotationBuffer;

[numthreads(64,1,1)]
void RecalcPositions (uint id : SV_DispatchThreadID)
{
	int id1 = IndicesBuffer[id * 3];
	int id2 = IndicesBuffer[id * 3 + 1];
	int id3 = IndicesBuffer[id * 3 + 2];

	float3 weights = WeightsBuffer[id].xyz;

	float3 p1 = CurrPositionBuffer[int2(id1, 0)].xyz;
	float3 p2 = CurrPositionBuffer[int2(id2, 0)].xyz;
	float3 p3 = CurrPositionBuffer[int2(id3, 0)].xyz;

	PositionBuffer[id].xyz = weights.x * p1 + weights.y * p2 + weights.z * p3;
	
	float3 n1 = CurrNormalBuffer[int2(id1, 0)].xyz;
	float3 n2 = CurrNormalBuffer[int2(id2, 0)].xyz;
	float3 n3 = CurrNormalBuffer[int2(id3, 0)].xyz;
	
	float3 forward = (weights.x * n1.xyz + weights.y * n2.xyz + weights.z * n3.xyz).xyz;

	float3 up = float3(0, 1.0, 0);
	float3 v1 = normalize(forward);
	float3 v2 = normalize(cross(up, v1));
	float3 v3 = cross(v1, v2);

    float m00 = v2.x;
    float m01 = v2.y;
    float m02 = v2.z;
    float m10 = v3.x;
    float m11 = v3.y;
    float m12 = v3.z;
    float m20 = v1.x;
    float m21 = v1.y;
    float m22 = v1.z;

	float num8 = (m00 + m11) + m22;
    float4 quaternion = float4(0,0,0,0);
    if (num8 > 0){
         float num = sqrt(num8 + 1.0);
         quaternion.w = num * 0.5;
         num = 0.5 / num;
         quaternion.x = (m12 - m21) * num;
         quaternion.y = (m20 - m02) * num;
         quaternion.z = (m01 - m10) * num;
         
    }else if ((m00 >= m11) && (m00 >= m22)){
         float num7 = sqrt(1.0 + m00 - m11 - m22);
         float num4 = 0.5 / num7;
         quaternion.x = 0.5 * num7;
         quaternion.y = (m01 + m10) * num4;
         quaternion.z = (m02 + m20) * num4;
         quaternion.w = (m12 - m21) * num4;
    }else if (m11 > m22){
         float num6 = sqrt(1.0 + m11 - m00 - m22);
         float num3 = 0.5 / num6;
         quaternion.x = (m10+ m01) * num3;
         quaternion.y = 0.5 * num6;
         quaternion.z = (m21 + m12) * num3;
         quaternion.w = (m20 - m02) * num3;
    }else{
		float num5 = sqrt(1.0 + m22 - m00 - m11);
		float num2 = 0.5 / num5;
		quaternion.x = (m20 + m02) * num2;
		quaternion.y = (m21 + m12) * num2;
		quaternion.z = 0.5 * num5;
		quaternion.w = (m01 - m10) * num2;
	}
	float PI = 3.14159265;
	float4 q = quaternion;
	q = q / length(q);
	float rotz = atan2(2.0 * (q.x * q.y + q.z * q.w), 1.0 - 2.0 * (q.y * q.y + q.z * q.z));
	float roty = asin(2 * (q.x * q.z - q.w * q.y));
	float rotx = atan2(2.0 * (q.x * q.w + q.y * q.z), 1.0 - 2.0 * (q.z * q.z + q.w * q.w));
	
	/*
	float sin = 2 * (q.x * q.z - q.w * q.y);
	float roty_cos = acos(sqrt(1 - sin * sin));
	if(roty < 0 && roty_cos > PI * 0.5) {
		roty -= PI * 0.5;
	}else if(roty > 0 && roty_cos > PI * 0.5){
		roty += PI * 0.5;
	}
	*/
	
	

	//float rotx = atan2(forward.y, forward.z);
	//float roty = atan2(forward.z, forward.x);
	//float rotz = atan2(forward.y, forward.x);

	float3 rot = float3(rotx * 2.0, roty * 2.0, rotz * 2.0);
	RotationBuffer[id].xyz = rot;
	//http://answers.unity3d.com/questions/467614/what-is-the-source-code-of-quaternionlookrotation.html
	//https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
}
